//配置各个module共用的参数
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'//kotlin语言使用注入框架，dataBinding都需要这个
apply plugin: "androidx.navigation.safeargs.kotlin" //用于navigation传参时候的一种安全防护
android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion build_tools_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode lib_version_code
        versionName lib_version_name

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        //java中Arouter配置方式 生成schema文件，便于查看数据库创建表的详细信息
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
                //ARouter需要配置
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        //kotlin ARouter 配置方式
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
                arg("room.schemaLocation": "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false //混淆与否
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            //混淆脚本
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'

    }

    buildFeatures {
        dataBinding true
        //启动ViewBinding,需要启用视图绑定的Module
        viewBinding true
    }



}
//创建一个dependencies管理的文件，可以在各自module的build.gradle文件里，apply form 该文件的相对路径(包含fileName)，如 apply form ../dependencies.gradle
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //region 平台相关的基础库
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //协程
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1"
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.core:core-ktx:1.5.0-alpha02'
    implementation 'androidx.fragment:fragment-ktx:1.3.0-alpha08'
    implementation 'androidx.activity:activity-ktx:1.2.0-alpha08'
    implementation 'androidx.activity:activity-ktx:1.2.0-alpha08'
    implementation 'com.google.android.material:material:1.3.0-alpha02'
    //官方材料组件
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    //viewpager2 可以滑动的格式显示视图或fragment
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    //recyclerview 在界面中显示大量数据的时候可以减少内存用量
    implementation "androidx.recyclerview:recyclerview:1.1.0"
    //endregion


    //region jetpack libs
//	implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'//已经废弃
    implementation 'androidx.lifecycle:lifecycle-livedata:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-runtime:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-beta01'
    kapt "androidx.lifecycle:lifecycle-common-java8:2.3.0-beta01"

    implementation 'androidx.room:room-runtime:2.3.0-alpha02'
    implementation 'androidx.room:room-common:2.3.0-alpha02'
    implementation 'androidx.room:room-ktx:2.3.0-alpha02'
    kapt "androidx.room:room-compiler:2.3.0-alpha02"

    implementation 'androidx.paging:paging-runtime:3.0.0-alpha07'
    implementation 'androidx.paging:paging-runtime-ktx:3.0.0-alpha07'
    implementation 'androidx.paging:paging-common:3.0.0-alpha07'
    implementation 'androidx.paging:paging-common-ktx:3.0.0-alpha07'

    implementation 'androidx.work:work-runtime:2.5.0-beta01'
    implementation 'androidx.work:work-runtime-ktx:2.5.0-beta01'
//	implementation 'androidx.work:work-rxjava2:2.4.0-alpha02'
    //endregion

    //注意配置navigation版本号的时候，project下的build.gradle的class path也需要同步navigation的版本号配置
    implementation "androidx.navigation:navigation-ui:$navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-fragment:$navigation_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
    implementation "androidx.navigation:navigation-runtime:$navigation_version"


    //region test libs
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit-ktx:1.1.2'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.test:core-ktx:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    //endregion


    //region koin依赖注入框架
    implementation "org.koin:koin-core:$koin_version" // Koin for Kotlin
    implementation "org.koin:koin-core-ext:$koin_version" // Koin extended & experimental features
    implementation "org.koin:koin-androidx-scope:$koin_version" // Koin AndroidX Scope features
    implementation "org.koin:koin-androidx-viewmodel:$koin_version" // Koin AndroidX ViewModel features
    implementation "org.koin:koin-androidx-fragment:$koin_version" // Koin AndroidX Fragment features
   // implementation "org.koin:koin-androidx-workmanager:$koin_version" // Koin AndroidX WorkManager
    //implementation "org.koin:koin-androidx-compose:$koin_version" // Koin AndroidX Jetpack Compose
    implementation "org.koin:koin-androidx-ext:$koin_version" // Koin AndroidX Experimental features

    //ARouter 路由框架
    implementation 'com.alibaba:arouter-api:1.5.1'
    kapt 'com.alibaba:arouter-compiler:1.5.1'

}
